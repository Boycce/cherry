@use "sass:math";
@function formDefaults($form) {
  /**
   * Notes:
   *  - Element font-size set to REM
   *  - Element attributes set to EM
   *  - Margins are set to REM so they can be resized separately if the user sets the element
   *    font size to px/em, which is very handy for responsive design
   */

  // First, find referenced variables
  $form: map-merge((
    "input-background":            #fdfdfd,
    "input-border-color--active":  $primary,
    "input-border-width":          2px,
    "input-padding":               0.86em 1.26em,
    "label-font-family":           $body-font-family,
    "label-font-size":             0.85rem,
    "textarea-padding":            0.86em 1.26em,
    "checkbox-height":             1.33rem, // determines width
    "checkbox-inner-height":       0.66rem, // determines width
    "toggle-height":               1.55rem,
  ), $form);

  // Second, find --inside reference variables
  $ip-t: paddingSide(map-get($form, "input-padding"), 'top');
  $ip-r: paddingSide(map-get($form, "input-padding"), 'right');
  $ip-b: paddingSide(map-get($form, "input-padding"), 'bottom');
  $ip-l: paddingSide(map-get($form, "input-padding"), 'left');
  $tp-t: paddingSide(map-get($form, "textarea-padding"), 'top');
  $tp-r: paddingSide(map-get($form, "textarea-padding"), 'right');
  $tp-b: paddingSide(map-get($form, "textarea-padding"), 'bottom');
  $tp-l: paddingSide(map-get($form, "textarea-padding"), 'left');
  $form: map-merge((
    "input-padding--inside":    ($ip-t + ($ip-t * 0.5)) $ip-r ($ip-b - ($ip-b * 0.5)) $ip-l,
    "textarea-padding--inside": ($tp-t + ($tp-t * 0.5)) $tp-r ($tp-b - ($tp-b * 0.5)) $tp-l,
  ), $form);

  @return map-merge((
    // Error
    "error-font-size":             0.85rem,
    "error-font-color":            $danger,
    // Input
    "input-animation--invalid":    shake 0.4s cubic-bezier(0.36, 0.07, 0.19, 0.97) both,
    "input-background":            map-get($form, "input-background"),
    "input-background--active":    map-get($form, "input-background"),
    "input-background--invalid":   map-get($form, "input-background"),
    "input-background--disabled":  #f7f7f7,
    "input-border-color":          #efefef,
    "input-border-color--active":  map-get($form, "input-border-color--active"),
    "input-border-color--invalid": $danger,
    "input-border-color--disabled": inherit,
    "input-border-radius":         4px,
    "input-border-width":          map-get($form, "input-border-width"),
    "input-box-shadow":            map-get($form, "input-box-shadow"), // ??? not defined above
    "input-box-shadow--active":    map-get($form, "input-box-shadow"), // ??? not defined above
    "input-box-shadow--invalid":   map-get($form, "input-box-shadow"), // ??? not defined above
    "input-btn-font-size":         0.9rem, // todo: change to % off btn font-size
    "input-color":                 $text,
    "input-color--invalid":        $text,
    "input-color--disabled":       #a5a5a5,
    "input-font-family":           $body-font-family,
    "input-font-size":             1rem,
    "input-font-weight":           inherit,
    "input-icon-width":            1.2em,
    "input-icon-spacing":          0.75em,
    "input-letter-spacing":        normal,
    "input-line-height":           1.5,
    "input-margin-bottom":         1.5rem,
    "input-padding":               map-get($form, "input-padding"),
    "input-placeholder-color":     rgba($text, 0.4),
    // Inside label
    "inside-label-color":          $text-light,
    "inside-label-font-size":      0.75rem,
    "inside-label-input-left":     paddingSide(map-get($form, "input-padding--inside"), 'left'),
    // Todo: find an relative top negative offset, rather than -2px
    "inside-label-input-top":      calc(#{paddingSide(map-get($form, "input-padding--inside"), 'bottom')} - 2px),
    "inside-label-textarea-left":  paddingSide(map-get($form, "textarea-padding--inside"), 'left'),
    "inside-label-textarea-top":   calc(#{paddingSide(map-get($form, "textarea-padding--inside"), 'bottom')} - 2px),
    // Label
    "label-color":                 $text-light,
    "label-font-family":           map-get($form, "label-font-family"),
    "label-font-size":             map-get($form, "label-font-size"),
    "label-font-weight":           inherit, 
    "label-letter-spacing":        inherit, 
    "label-margin-bottom":         0.45em,
    "label-text-transform":        inherit,
    // Textarea
    "textarea-line-height":        1.5em, // same as input
    "textarea-min-height":         7em,
    "textarea-padding":            map-get($form, "textarea-padding"),
    // Variable inputs
    "variable-color":              darken(map-get($form, "input-background"), 12%),
    "variable-color--active":      map-get($form, "input-border-color--active"),
    // Checkbox/radio (maybe change below to "variable-*")
    "checkbox-border-width":       map-get($form, "input-border-width"),
    "checkbox-border-radius":      2px,
    "checkbox-font-family":        map-get($form, "label-font-family"),
    "checkbox-font-size":          map-get($form, "label-font-size"),
    "checkbox-font-weight":        inherit, 
    "checkbox-letter-spacing":     inherit, 
    "checkbox-text-transform":     inherit,
    "checkbox-padding-left":       0.8em,
    "checkbox-padding-right":      1.066em,
    // checkbox 
    "checkbox-height":             map-get($form, "checkbox-height"), // determines width
    "checkbox-inner-height":       map-get($form, "checkbox-inner-height"), // determines width
    "checkbox-tick-height":        0.7rem, // determines width
    // radio
    "radio-height":                map-get($form, "checkbox-height"), // determines width
    "radio-inner-height":          map-get($form, "checkbox-inner-height"), // determines width
    // toggle
    "toggle-font-family":          map-get($form, "label-font-family"),
    "toggle-font-size":            map-get($form, "label-font-size"),
    "toggle-font-weight":          inherit, 
    "toggle-letter-spacing":       inherit, 
    "toggle-text-transform":       inherit,
    "toggle-height":               map-get($form, "toggle-height"),
    "toggle-width":                map-get($form, "toggle-height") * 1.8,
  ), $form);
}
@function empty-map($x: x) {
  @return map-remove(($x:$x), $x);
}
// Note that in SASS, a list with a single map == a map
@if type-of($forms) == 'map' {
  $forms: append((), $forms);
}
@if (length($forms) == 0) {
  $forms: append($forms, empty-map());
}
@for $i from 1 through length($forms) {
  $form: nth($forms, $i);
  @if type-of($form) != map { $form: empty-map(); }
  $map: formDefaults($form);
  $class: ".form-#{$i}";
  @if $i == 1 { $class: ".form"; }

  #{$class} {

  /* ---- Main ------------------------- */

    input,
    select,
    textarea,
    .input,
    .vs__dropdown-toggle,
    .rs__control {
      width: 100%;
      padding: map-get($map, "input-padding");
      font-family: map-get($map, "input-font-family");
      color: map-get($map, "input-color");
      font-size: map-get($map, "input-font-size");
      font-weight: map-get($map, "input-font-weight");
      letter-spacing: map-get($map, "input-letter-spacing");
      line-height: map-get($map, "input-line-height");
      background: map-get($map, "input-background");
      box-shadow:
        0 0 0 map-get($map, "input-border-width") map-get($map, "input-border-color") inset,
        map-get($map, "input-box-shadow");
      border: 0;
      box-sizing: border-box;
      border-radius: map-get($map, "input-border-radius");
      vertical-align: top;
      transition: background-color ease 0.2s, border-color ease 0.2s, box-shadow ease 0.2s;
      -webkit-appearance: none;
    }
    .input,
    .input-grp,
    .radio-grp,
    .checkbox-grp,
    .toggle-grp {
      margin-bottom: map-get($map, "input-margin-bottom");
    }
    .size-input {
      font-size: map-get($map, "input-font-size");
    }
    input[type="password"]:not(:placeholder-shown) {
      letter-spacing: 1px;
    }
    input[type="file"] {
      // padding: 10px 19px 11px;
    }
    textarea {
      padding: map-get($map, "textarea-padding");
      line-height: map-get($map, "textarea-line-height");
      max-height: 40em;
      min-height: map-get($map, "textarea-min-height");
      resize: vertical;
    }
    .input-grp,
    .radio-grp,
    .checkbox-grp,
    .toggle-grp {
      text-align: left;
      position: relative;
    }

  /* ---- Placeholder & autofill ------- */

    ::-webkit-input-placeholder {
      color: map-get($map, "input-placeholder-color");
    }
    input:-webkit-autofill {
      -webkit-text-fill-color: map-get($map, "input-color");
      -webkit-box-shadow:
        0 0 0 map-get($map, "input-border-width") map-get($map, "input-border-color") inset,
        0 0 0 1000px map-get($map, "input-background") inset,
        map-get($map, "input-box-shadow");
    }
    input:-webkit-autofill::first-line {
      font-family: map-get($map, "input-font-family");
      font-size: map-get($map, "input-font-size");
      font-weight: map-get($map, "input-font-weight");
    }

  /* ---- Elements --------------------- */

    /* Input + button element  */

    .input-btn {
      display: flex;
    }
    .input-btn input {
      flex: 1;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    .input-btn .btn {
      width: auto !important;
      min-width: 0;
      font-size: map-get($map, "input-btn-font-size");
      line-height: map-get($map, "input-line-height");
      border-radius: map-get($map, "input-border-radius");
      padding: map-get($map, "input-padding");
      margin-left: -5px;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    /* Form error */

    .form-error {
      display: none;
      color: map-get($map, "error-font-color");
    }
    .form-error,
    .size-error,
    .toggle-grp .form-error,
    .checkbox-grp .form-error,
    .radio-grp .form-error,
    .input-grp .form-error {
      font-size: map-get($map, "error-font-size");
    }
    .form-error:empty {
      margin: 0 !important;
    }
    .is-invalid .form-error,
    &.is-invalid .form-error,
    .form-error.form-error-show {
      display: block;
    }

  /* ---- Labels ----------------------- */

    label,
    .label,
    .label-right {
      // display: inline-block;
      // vertical-align: top;
      display: block;
      line-height: 1.4em;
      font-family: map-get($map, "label-font-family");
      font-weight: map-get($map, "label-font-weight");
      letter-spacing: map-get($map, "label-letter-spacing");
      text-transform: map-get($map, "label-text-transform");
      margin-bottom: map-get($map, "label-margin-bottom");
      cursor: pointer;
      user-select: none;
    }
    label,
    .label {
      /* matches util.errorElement  */
      transition: opacity 0.15s ease, color 0.25s ease, text-decoration-color 0.25s ease;
    }
    label,
    .label,
    .text-label,
    .label-right {
      color: map-get($map, "label-color");
      text-decoration-color: map-get($map, "label-color");
    }
    label,
    .label,
    .size-label,
    .label-right {
      font-size: map-get($map, "label-font-size");
    }
    label.invalid-out,
    label.is-invalid-out {
      //opacity: 0.2;
    }
    label.invalid-in,
    label.is-invalid-in {
      //opacity: 1;
      color: map-get($map, "error-font-color");
    }
    .label-right,
    a.label-right {
      display: block;
      float: right;
      margin-right: 1px;
    }
    .label-bottom {
      position: absolute;
      right: 0;
      bottom: 0;
    }

    /* Floating labels */

    .has-float-label,
    .has-inside-label {
      input + label,
      select + label,
      textarea + label,
      .input + label,
      .rs__control + label {
        position: absolute;
        left: 0;
        top: 0;
        cursor: text;
        opacity: 0;
        transform: translateY(3px);
        transition: transform 0.2s, opacity 0.2s;
      }
      input:-webkit-autofill + *,
      input:not(:placeholder-shown) + *,
      select:not(:placeholder-shown) + *,
      textarea:not(:placeholder-shown) + *,
      .rs__control.rs__control--has-value + * {
        transform: translateY(0px);
        opacity: 1;
      }
    }

    /* Inside labels */

    .has-inside-label {
      input + label,
      select + label,
      .rs__control + label {
        left: map-get($map, "inside-label-input-left");
        top: map-get($map, "inside-label-input-top");
        font-size: map-get($map, "input-font-size");
        > span {
          font-size: map-get($map, "inside-label-font-size");
        }
      }
      textarea + label {
        left: map-get($map, "inside-label-textarea-left");
        top: map-get($map, "inside-label-textarea-top");
        font-size: map-get($map, "input-font-size");
        > span {
          font-size: map-get($map, "inside-label-font-size");
        }
      }
      input:-webkit-autofill,
      input:not(:placeholder-shown),
      select:not(:placeholder-shown),
      .rs__control.rs__control--has-value {
        padding: map-get($map, "input-padding--inside");
      }
      textarea:not(:placeholder-shown) {
        padding: map-get($map, "textarea-padding--inside");
      }
    }

  /* ---- Icons (no textarea support) -- */

    // ip = input-padding
    $ip-top: paddingSide(map-get($map, "input-padding"), 'top');
    $ip-left: paddingSide(map-get($map, "input-padding"), 'left');
    $ip-right: paddingSide(map-get($map, "input-padding"), 'right');
    .icon-left,
    .icon-right {
      position: absolute;
      margin-top: $ip-top;
      font-size: map-get($map, "input-font-size");
      line-height: map-get($map, "input-line-height");
      width: map-get($map, "input-icon-width");
      pointer-events: none;
      align-items: center;
      display: inline-flex;
      justify-content: center;
      &:after {
        // Force line height to take effect
        content: "a";
        display: inline;
        width: 0;
        overflow: hidden;
      }
    }
    .has-icon-left {
      position: relative;
      input,
      select,
      .input,
      .vs__dropdown-toggle {
        padding-left: calc(#{$ip-left} - 2px +
          #{map-get($map, "input-icon-width")} +
          #{map-get($map, "input-icon-spacing")});
      }
      .icon-left {
        left: calc(#{$ip-left} - 2px);
      }
    }
    .has-icon-right {
      position: relative;
      input,
      select,
      .input,
      .vs__dropdown-toggle {
        padding-right: calc(
          #{$ip-right} - 2px +
          #{map-get($map, "input-icon-width")} +
          #{map-get($map, "input-icon-spacing")});
      }
      .icon-right {
        right: calc(#{$ip-right} - 2px);
      }
    }

    /* Inside label with icon */

    $ip-left: paddingSide(map-get($map, "input-padding--inside"), 'left');
    $ip-right: paddingSide(map-get($map, "input-padding--inside"), 'right');
    $ll-left: map-get($map, "inside-label-input-left");
    .has-icon-left.has-inside-label,
    .has-icon-left .has-inside-label,
    .has-inside-label .has-icon-left {
      input:-webkit-autofill,
      input:not(:placeholder-shown),
      select:not(:placeholder-shown) {
        padding-left: calc(#{$ip-left} - 2px +
          #{map-get($map, "input-icon-width")} +
          #{map-get($map, "input-icon-spacing")});
      }
      input + label,
      select + label {
        left: calc(#{$ll-left} - 2px +
          #{map-get($map, "input-icon-width")} +
          #{map-get($map, "input-icon-spacing")});
      }
    }

  /* ---- Select ----------------------- */

    $ip-right: paddingSide(map-get($map, "input-padding"), 'right');
    select,
    .vs__dropdown-toggle {
      background-image: url("data:image/svg+xml;utf8,<svg viewBox='0 0 12 7' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M1 1L6 6L11 1' stroke='%23c5cbd2' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg>");
      appearance: none;
      background-repeat: no-repeat;
      background-size: auto 7px;
      background-position: right $ip-right center;
      transition: all 200ms ease;
    }

  /* ---- Variable inputs -------------- */

    .radio-grp,
    .checkbox-grp {
      input {
        position: absolute;
        left: -9999px;
      }
      label {
        display: block;
      }
      .has-tooltip {
        display: inline;
        padding: 0;
      }
      input + label {
        position: relative;
        display: inline-block;
        font-size: map-get($map, "checkbox-font-size");
        font-family: map-get($map, "checkbox-font-family");
        font-weight: map-get($map, "checkbox-font-weight");
        letter-spacing: map-get($map, "checkbox-letter-spacing");
        text-transform: map-get($map, "checkbox-text-transform");
        padding: map-get($map, "input-padding");
        padding-right: map-get($map, "checkbox-padding-right");
        user-select: none;
        margin-bottom: 0;
        vertical-align: sub;
      }
      input + label:before {
        content: "";
        position: absolute;
        left: 0;
        top: 50%;
        background: map-get($map, "input-background");
        border: map-get($map, "checkbox-border-width") solid map-get($map, "variable-color");
        border-radius: map-get($map, "checkbox-border-radius");
        box-sizing: border-box;
        transition: all 0.2s ease;
      }
      input + label:after {
        content: "";
        position: absolute;
        left: 0;
        top: 50%;
        border-radius: map-get($map, "checkbox-border-radius");
        transition: all 0.2s ease;
        color: transparent;
      }
      input:checked + label:before {
        border-color: map-get($map, "variable-color--active");
      }
      input:checked + label:after {
        background-color: map-get($map, "variable-color--active");
        color: map-get($map, "variable-color--active");
      }
    }
    .checkbox-grp {
      $checkbox-width: map-get($map, "checkbox-height");
      $checkbox-inner-width: map-get($map, "checkbox-inner-height");
      $checkbox-tick-width: map-get($map, "checkbox-tick-height");
      input + label {
        padding-left: calc(#{$checkbox-width} + #{map-get($map, "checkbox-padding-left")});
      }
      input + label:before {
        width: $checkbox-width;
        height: map-get($map, "checkbox-height");
        margin-top: -(math.div(map-get($map, "checkbox-height"), 2)); // todo: check that this is minus...
      }
      input + label:after {
        width: $checkbox-inner-width;
        height: map-get($map, "checkbox-inner-height");
        margin-left: calc((#{$checkbox-width} - #{$checkbox-inner-width}) / 2);
        margin-top: -(math.div(map-get($map, "checkbox-inner-height"), 2)); // todo: check that this is minus...
      }
      &.is-tick {
        input + label:after {
          width: $checkbox-tick-width;
          height: map-get($map, "checkbox-tick-height");
          margin-left: calc((#{$checkbox-width} - #{$checkbox-tick-width}) / 2);
          margin-top: -(math.div(map-get($map, "checkbox-tick-height"), 2)); // todo: check that this is minus...
          background-repeat: no-repeat;
          background-position: center center;
          background-color: transparent !important;
        }
        input:checked + label:after {
          // SVG's in edge can't include ', ^, `, |, x7F
          // alternative: clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
          background-image: url("data:image/svg+xml;utf8,<svg viewBox='0 0 45 37' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M3.13 20.11L14.73 31.07L41.81 2.70001' stroke='#{encodecolor(map-get($map, 'variable-color--active'))}' stroke-width='7' /></svg>");
        }
      }
      
    }
    .radio-grp {
      $radio-width: map-get($map, "radio-height");
      $radio-inner-width: map-get($map, "radio-inner-height");
      input + label {
        padding-left: calc(#{$radio-width} + #{map-get($map, "checkbox-padding-left")});
      }
      input + label:before {
        width: $radio-width;
        height: map-get($map, "radio-height");
        margin-top: -(math.div(map-get($map, "radio-height"), 2)); // todo: check that this is minus...
        border-radius: 100% !important;
      }
      input + label:after {
        width: $radio-inner-width;
        height: map-get($map, "radio-inner-height");
        margin-left: calc((#{$radio-width} - #{$radio-inner-width}) / 2);
        margin-top: -(math.div(map-get($map, "radio-inner-height"), 2)); // todo: check that this is minus...
        border-radius: 100% !important;
      }
    }
    .toggle-grp {
      input {
        position: absolute;
        left: -9999px;
      }
      label {
        display: block;
      }
      input + label {
        position: relative;
        display: inline-block;
        font-size: map-get($map, "toggle-font-size");
        font-family: map-get($map, "toggle-font-family");
        font-weight: map-get($map, "toggle-font-weight");
        letter-spacing: map-get($map, "toggle-letter-spacing");
        text-transform: map-get($map, "toggle-text-transform");
        min-height: map-get($map, "toggle-height"); //1em;height:
        padding: map-get($map, "input-padding");
        padding-left: calc(#{map-get($map, "toggle-width")} + 0.8em);
        padding-right: 1.2em;
        margin-bottom: 0;
        user-select: none;
        vertical-align: sub;
      }
      input + label:before,
      input + label:after {
        content: "";
        position: absolute;
        left: 0;
        top: 50%;
        margin-top: -(math.div(map-get($map, "toggle-height"), 2)); // todo: check that this is minus...
        background: map-get($map, "variable-color");
        border-radius: map-get($map, "toggle-height");
        width: map-get($map, "toggle-width");
        height: map-get($map, "toggle-height");
        box-sizing: border-box;
        transition: all 0.2s ease;
      }
      input + label:after {
        width: map-get($map, "toggle-height");
        border: 2px solid transparent;
        border-color: transparent;
        background-color: #fff;
        background-clip: content-box;
      }
      input:checked + label:before {
        background-color: map-get($map, "variable-color--active");
      }
      input:checked + label:after {
        left: map-get($map, "toggle-width") - map-get($map, "toggle-height");
      }
      &.has-no-label input + label {
        padding-left: map-get($map, "toggle-width");
        padding-right: 0;
        padding-top: 0;
        padding-bottom: 0;
      }
    }

  /* ---- States ----------------------- */

    input:active,
    input:focus,
    input.is-active,
    input.is-focused,
    select:active,
    select:focus,
    select.is-active,
    select.is-focused,
    textarea:active,
    textarea:focus,
    textarea.is-active,
    textarea.is-focused,
    .input:active,
    .input:focus,
    .input.is-active,
    .input.is-focused,
    .vs--open .vs__dropdown-toggle,
    .rs__control--is-focused,
    .rs__control--menu-is-open {
      outline: 0;
      box-shadow:
        0 0 0 map-get($map, "input-border-width") map-get($map, "input-border-color--active") inset,
        map-get($map, "input-box-shadow--active");
      background-color: map-get($map, "input-background--active");
      &:-webkit-autofill {
        -webkit-box-shadow:
          0 0 0 map-get($map, "input-border-width") map-get($map, "input-border-color--active") inset,
          0 0 0 1000px map-get($map, "input-background--active") inset,
          map-get($map, "input-box-shadow--active");
      }
    }
    input.is-invalid,
    select.is-invalid,
    textarea.is-invalid,
    .input.is-invalid,
    .vs__dropdown-toggle.is-invalid,
    .rs__control--is-invalid,
    .input-grp.is-invalid input,
    .input-grp.is-invalid select,
    .input-grp.is-invalid textarea,
    .input-grp.is-invalid .input,
    .input-grp.is-invalid .vs__dropdown-toggle,
    .input-grp.is-invalid .rs__control {
      color: map-get($map, "input-color--invalid");
      box-shadow:
        0 0 0 map-get($map, "input-border-width") map-get($map, "input-border-color--invalid") inset,
        map-get($map, "input-box-shadow--invalid");
      // doesnt work for dropdown/toggle
      background-color: map-get($map, "input-background--invalid");
      animation: map-get($map, "input-animation--invalid");
      transform: translate3d(0, 0, 0);
      backface-visibility: hidden;
      &:-webkit-autofill {
        -webkit-text-fill-color: map-get($map, "input-color--invalid");
        -webkit-box-shadow:
          0 0 0 map-get($map, "input-border-width") map-get($map, "input-border-color--invalid") inset,
          0 0 0 1000px map-get($map, "input-background--invalid") inset,
          map-get($map, "input-box-shadow--invalid");
      }
    }

    input[type="radio"].is-invalid + label,
    input[type="checkbox"].is-invalid + label,
    input[type="radio"].is-invalid + label,
    input[type="checkbox"].is-invalid + label {
      animation: map-get($map, "input-animation--invalid");
      transform: translate3d(0, 0, 0);
      backface-visibility: hidden;
      color: #7b1a1a;
    }
    input[type="radio"].is-invalid + label:before,
    input[type="checkbox"].is-invalid + label:before {
      border-color: map-get($map, "input-border-color--invalid"); // was $danger
      background-color: map-get($map, "input-background--invalid");
    }
    textarea:disabled,
    input:disabled,
    textarea.is-disabled,
    input.is-disabled,
    .rs__control--is-disabled {
      border-color: map-get($map, "input-border-color--disabled"); // NEW: may affect invalid borders
      background-color: map-get($map, "input-background--disabled");
      color: map-get($map, "input-color--disabled");
    }

  /* ---- React Select ----------------- */

    /* Remove inner input & element styling */
    .rs {
      position: static;
    }
    .rs__value-container {
      padding: 0;
      padding-right: 15px;
      &.rs__value-container--is-multi.rs__value-container--has-value {
        padding-right: 43px;
        > input {
          /* not searchable with multi yeilds an awkward input box once there is a value*/
          line-height: 0;
          font-size: 0;
        }
      }
      input {
        padding: 0 !important;
        border: 0;
        box-shadow: none;
        background-color: transparent;
      }
      > div {
        margin: 0 5px 0 0;
        padding: 0;
      }
      .rs__placeholder {
        color: map-get($map, "input-placeholder-color");
      }
      .rs__single-value {
        color: map-get($map, "input-color");
      }
      .rs__multi-value {
        margin-top: 1px;
        margin-bottom: 1px;
      }
    }
    .rs__indicators {
      position: absolute;
      top: 50%;
      right: paddingSide(map-get($map, "input-padding"), 'right');
      margin-top: -10px;
      margin-right: -7px;
      .rs__indicator-separator {
        display: none;
      }
      > div {
        padding: 0px 4px;
        height: 100%;
        align-items: center;
        &:not(:hover) {
          color: #c5ccd3;
        }
      }
    }

  /* ---- Miscellaneous ---------------- */

    /* Stop autofill background flash */

    .onloading input,
    .onloading select,
    .onloading textarea,
    .onloading .input,
    .onloading .vs__dropdown-toggle {
      transition: none;
    }

    /* Animations */

    @keyframes shake {
      30% {
        transform: translate3d(-1px, 0, 0);
      }
      60% {
        transform: translate3d(1px, 0, 0);
      }
      80% {
        transform: translate3d(0px, 0, 0);
      }
    }

    /* Prevent input zooming */

    @media (max-width: 550px) {
      .form-mobile {
        input[type="color"],
        input[type="date"],
        input[type="datetime"],
        input[type="datetime-local"],
        input[type="email"],
        input[type="month"],
        input[type="number"],
        input[type="password"],
        input[type="search"],
        input[type="tel"],
        input[type="text"],
        input[type="time"],
        input[type="url"],
        input[type="week"],
        select,
        textarea,
        .input {
          font-size: 16px;
          letter-spacing: 0;
        }
        ::-moz-placeholder {
          font-size: 16px;
          letter-spacing: 0;
        }
        :-ms-input-placeholder {
          font-size: 16px;
          letter-spacing: 0;
        }
        ::-webkit-input-placeholder {
          font-size: 16px;
          letter-spacing: 0;
        }
      }
    }

  }
}
